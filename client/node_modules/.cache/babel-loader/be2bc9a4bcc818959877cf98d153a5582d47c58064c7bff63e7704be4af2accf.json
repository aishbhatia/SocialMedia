{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aishb\\\\OneDrive\\\\Desktop\\\\Projects\\\\Social media app\\\\client\\\\src\\\\scenes\\\\widgets\\\\PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = ({\n  userId,\n  isProfile = false\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const token = useSelector(state => state.token);\n  const getPosts = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/posts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const data = await response.json();\n      dispatch(setPosts({\n        posts: data\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const getUserPosts = async () => {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${userId}/posts`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user posts\");\n      }\n      const data = await response.json();\n      dispatch(setPosts({\n        posts: data\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check if posts is an array before using the map method\n  if (!Array.isArray(posts)) {\n    // Handle the case when posts is not an array, or display a loading message\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading posts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.map(({\n      _id,\n      userId,\n      firstName,\n      lastName,\n      description,\n      location,\n      picturePath,\n      userPicturePath,\n      likes,\n      comments\n    }) => /*#__PURE__*/_jsxDEV(PostWidget, {\n      postId: _id,\n      postUserId: userId,\n      name: `${firstName} ${lastName}`,\n      description: description,\n      location: location,\n      picturePath: picturePath,\n      userPicturePath: userPicturePath,\n      likes: likes,\n      comments: comments\n    }, _id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n};\n_s(PostsWidget, \"7TqOh3V0nCSP3QUJlbitnmq7L8o=\", true);\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["PostsWidget","userId","isProfile","_s","dispatch","useDispatch","posts","useSelector","state","token","getPosts","response","fetch","method","headers","Authorization","ok","Error","data","json","setPosts","error","console","getUserPosts","useEffect","Array","isArray","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_Fragment","map","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments","PostWidget","postId","postUserId","name","_c","$RefreshReg$"],"sources":["C:/Users/aishb/OneDrive/Desktop/Projects/Social media app/client/src/scenes/widgets/PostsWidget.jsx"],"sourcesContent":["const PostsWidget = ({ userId, isProfile = false }) => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.posts);\r\n  const token = useSelector((state) => state.token);\r\n\r\n  const getPosts = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/posts\", {\r\n        method: \"GET\",\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch posts\");\r\n      }\r\n      const data = await response.json();\r\n      dispatch(setPosts({ posts: data }));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const getUserPosts = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3001/posts/${userId}/posts`,\r\n        {\r\n          method: \"GET\",\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch user posts\");\r\n      }\r\n      const data = await response.json();\r\n      dispatch(setPosts({ posts: data }));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isProfile) {\r\n      getUserPosts();\r\n    } else {\r\n      getPosts();\r\n    }\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // Check if posts is an array before using the map method\r\n  if (!Array.isArray(posts)) {\r\n    // Handle the case when posts is not an array, or display a loading message\r\n    return <div>Loading posts...</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {posts.map(\r\n        ({\r\n          _id,\r\n          userId,\r\n          firstName,\r\n          lastName,\r\n          description,\r\n          location,\r\n          picturePath,\r\n          userPicturePath,\r\n          likes,\r\n          comments,\r\n        }) => (\r\n          <PostWidget\r\n            key={_id}\r\n            postId={_id}\r\n            postUserId={userId}\r\n            name={`${firstName} ${lastName}`}\r\n            description={description}\r\n            location={location}\r\n            picturePath={picturePath}\r\n            userPicturePath={userPicturePath}\r\n            likes={likes}\r\n            comments={comments}\r\n          />\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostsWidget;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}